#include <chrono>

#include "KMeans.h"

#include "containers/OpenMP/matrix/headers/CSVMatrix.h"

#include <string>
//https://stackoverflow.com/questions/6339970/c-using-function-as-parameter


Matrix<float> dataGenerator(int n){
    // 4 classes and 2 dimensions (x, y) -> 8 values
    // (µ_x_0, µ_y_0), (..., ...), (µ_x_c, µ_y_c)
    float mu_vect[] = {-1, 2, \
                        2, 1, \
                        4, -2, \
                        3, -1};
    float sd_vect[] = {0.5, 0.6, \
                       0.8, 0.7, \
                       1.2, 0.3, \
                       0.3, 0.5};
    Matrix<float> database_generator(8, n, GAUSS, mu_vect, sd_vect, 1);
    return database_generator;
}

Matrix<float> dataGenerator3D(int distr_samples){
    /**
     * #data_points = #distr * distr_samples
    */
    // 4 classes and 3 dimensions (x, y, z) -> 12 values
    // (µ_x_0, µ_y_0, µ_z_0), (..., ..., ...), (µ_x_c, µ_y_c,µ_z_c)
    float mu_vect[] = {-1, 2, 3, \
                        2, 1, -1, \
                        4, -2, 2, \
                        3, -1, 4};
    float sd_vect[] = {0.5, 0.6, 0.4, \
                       0.8, 0.7, 0.5, \
                       1.2, 0.3, 0.8, \
                       0.3, 0.5, 0.4};
    Matrix<float> database_generator(12, distr_samples, GAUSS, mu_vect, sd_vect, 1);

    Matrix<float> dataX = database_generator.row(0); 
    dataX.hStack(database_generator.row(3));
    dataX.hStack(database_generator.row(6));
    dataX.hStack(database_generator.row(9));

    Matrix<float> dataY = database_generator.row(1);
    dataY.hStack(database_generator.row(4));
    dataY.hStack(database_generator.row(7));
    dataY.hStack(database_generator.row(10));

    Matrix<float> dataZ = database_generator.row(2);
    dataZ.hStack(database_generator.row(5));
    dataZ.hStack(database_generator.row(8));
    dataZ.hStack(database_generator.row(11));

    Matrix<float> DATABASE(dataX);
    DATABASE.vStack(dataY);
    DATABASE.vStack(dataZ);
    return DATABASE;
}

void dataParsing(){
    std::string from_path = "containers/OpenMP/matrix/headers/files/input/mnist_train.csv";
    CSVMatrix<int> CSV(from_path);
    CSV.fillData(4);
    std::cout << "Numb. of digits loaded: " << CSV.getRows() << std::endl;
    
    for(int s = 0; s < 5; ++s){
        Matrix<int> digit = CSV.row(s);
        for(int i = 0; i < 28; ++i){
            for(int j = 0; j < 28; ++j){
                int val = digit(0, j+i*28);
                if(val > 0) std::cout << "o";
                else std::cout << " ";
            }
            std::cout << std::endl;
        }
        std::cout << std::endl;
    }
    
   std::cout << CSV << std::endl;
   CSV.putFile("containers/OpenMP/matrix/headers/files/output/example.csv", 0, CSV.getRows());
}

void KMeansBenchmark2D(){
    Matrix<float> DATA = dataGenerator(25000);
     Matrix<float> dataX = DATA.row(0); 
        dataX.hStack(DATA.row(2));
        dataX.hStack(DATA.row(4));
        dataX.hStack(DATA.row(6));

        Matrix<float> dataY = DATA.row(1);
        dataY.hStack(DATA.row(3));
        dataY.hStack(DATA.row(5));
        dataY.hStack(DATA.row(7));


        Matrix<float> DATABASE(dataX);
        DATABASE.vStack(dataY);

        KMeans<float> KM(DATABASE, 4, 4);
        unsigned __int64 time_start_v1 = std::chrono::duration_cast<std::chrono::nanoseconds>(std::chrono::system_clock::now().time_since_epoch()).count();

        KM.run(35);

        unsigned __int64 time_end_v1 = std::chrono::duration_cast<std::chrono::nanoseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
        KM.print();
        std::cout << "K-means comp time: " << (time_end_v1 - time_start_v1) * 1e-9 << std::endl;

}

void kMeansBenchmark3D(){
    std::vector<float> time_vector;
    std::vector<int> data_samples_vector;
    // [250*4 -> 25000*4]
    for(int n = 250; n < 252500; n+=2500){
    //for(int n = 4; n < 1000; n+=1){
        Matrix<float> DATA = dataGenerator3D(n);
        
        Matrix<float> dataX = DATA.row(0); 
        dataX.hStack(DATA.row(3));
        dataX.hStack(DATA.row(6));
        dataX.hStack(DATA.row(9));

        Matrix<float> dataY = DATA.row(1);
        dataY.hStack(DATA.row(4));
        dataY.hStack(DATA.row(7));
        dataY.hStack(DATA.row(10));

        Matrix<float> dataZ = DATA.row(2);
        dataZ.hStack(DATA.row(5));
        dataZ.hStack(DATA.row(8));
        dataZ.hStack(DATA.row(11));

        Matrix<float> DATABASE(dataX);
        DATABASE.vStack(dataY);
        DATABASE.vStack(dataZ);

        //int data_len = DATABASE.getCols();
        
        KMeans<float> KM(DATABASE, 4, 4);

        unsigned __int64 time_start_v1 = std::chrono::duration_cast<std::chrono::nanoseconds>(std::chrono::system_clock::now().time_since_epoch()).count();

        KM.run(10);

        unsigned __int64 time_end_v1 = std::chrono::duration_cast<std::chrono::nanoseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
        std::printf("%6d\r", n);
        //std::cout << "V1 time: " << (time_end_v1 - time_start_v1) * 1e-9 << std::endl;
        time_vector.push_back((time_end_v1 - time_start_v1) * 1e-9);
        data_samples_vector.push_back(n);
    }
    std::cout << "time_vector = [";
    for(auto elem : time_vector) std::cout << elem << ", ";
    std::cout << "]\n\ndata_samples = [";
    for(auto elem : data_samples_vector) std::cout << elem << ", ";
    std::cout << "]" << std::endl;
}

template<typename T>
void sig(T& val){
    val = 1 / (1 + exp(-val));
}

int main(int argc, char** argv){
    unsigned __int64 time_start = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
    /////////////////////////////
    
    float dataX[] = {-0.0203988, 0.13636, -0.695226, -0.32443, -1.77856, -0.732107, -0.55537, -1.36888, -0.704249, -1.72234, -1.71948, -1.53748, -1.11036, -1.64143, -1.28263, -1.65475, -0.889076, -0.481975, -1.09817, -1.64869, -0.932731, -1.03444, -0.613715, -1.00512, -1.84023, -1.2496, -1.42609, -0.600511, -1.81852, -0.805702, -0.204836, -1.01715, -1.48556, -0.976584, -0.617952, -0.110127, -0.733142, -0.346295, -1.09039, -1.29602, -1.47253, -1.24903, -0.457761, -0.881609, -1.3798, -1.01833, -0.998767, -0.164864, -0.943327, -1.5377, -0.898637, -1.48418, -1.09806, -0.730715, -1.89016, -0.105723, -1.97151, -1.30439, -0.426552, -1.1928, -1.05289, -1.25665, -1.68803, -0.901366, -0.197269, -0.225265, -0.170683, -0.911437, -1.31957, -1.55749, -1.6208, -1.13217, -1.38324, -0.329716, -0.855588, -1.32228, -0.890081, -1.67182, -1.36857, -1.62571, -1.19299, -1.33334, -0.098912, -0.752381, -1.37932, -1.37727, -0.788923, -0.688671, -0.771783, -0.936555, -1.48579, -1.9822, -0.276695, -1.80588, -0.738964, -0.952284, -1.70412, -1.33017, -0.538462, -0.679331, 0.629116, 2.60068, 2.1384, 3.10197, 1.28832, 2.68853, 2.23298, 3.52585, 2.66194, 2.81097, 2.29369, 2.57751, 2.09372, 1.3508, 3.02061, 1.82641, 2.44399, 1.39245, 2.61106, 2.75404, 0.174553, 2.49268, 0.58739, 1.90043, 2.10251, 3.34615, 2.32938, 2.20126, 1.98229, 1.83759, 1.79408, 2.64831, 1.7681, 1.74092, 2.70914, 2.16206, 2.49882, 1.55773, 2.36205, 2.13525, 1.21403, 1.81684, 1.59205, 0.583211, 1.75161, 1.95348, 3.20609, 1.39015, 2.46189, 1.66057, 1.77039, 1.87339, 2.87193, 0.996934, 0.790235, 1.09679, 1.69002, 2.37087, 3.08156, 1.23773, 2.43307, 2.53542, 1.99862, 2.87382, 1.76373, 0.319279, 3.20839, 1.81814, 1.13861, 2.98957, 3.40003, 1.65679, 1.97234, 1.29145, 1.50235, 3.37209, 1.9262, 0.60815, 0.940361, 0.472243, 1.45466, 1.99463, 2.51124, 2.58845, 4.11341, 1.36291, 1.64028, 1.30109, 2.24145, 1.67327, 2.08942, 1.63727, 1.14571, 2.96731, 3.036, 1.94045, 0.130507, 1.85568, 1.07757, 2.80146, 5.04857, 4.65764, 5.02996, 1.77301, 3.89952, 5.93133, 2.80508, 3.58563, 3.77847, 3.71337, 5.33536, 4.5243, 4.66, 1.99132, 3.10843, 5.18376, 3.73023, 4.21605, 3.0022, 3.83387, 6.09135, 4.07281, 4.33001, 2.97295, 4.27191, 4.50314, 4.58703, 5.94723, 4.16664, 4.39815, 3.05907, 5.50489, 2.04454, 3.49759, 5.18413, 4.81792, 3.60384, 4.0455, 2.5955, 4.68107, 2.60671, 3.21519, 5.06504, 3.85317, 3.22945, 2.14928, 3.88875, 2.16776, 2.84924, 2.9457, 2.60026, 2.12059, 3.36932, 4.0399, 5.3054, 4.69114, 3.27942, 4.45116, 1.23164, 2.98447, 3.93372, 3.01422, 4.13458, 3.70151, 3.70288, 3.78657, 4.02076, 3.41927, 3.4148, 2.67085, 3.61734, 5.73634, 6.13731, 4.90218, 4.86039, 3.79528, 3.44112, 6.01592, 1.51464, 4.00547, 5.79693, 2.98581, 3.1552, 2.28188, 4.96307, 3.45387, 2.79251, 3.21759, 3.49141, 3.54028, 2.06435, 3.26274, 5.09198, 3.74831, 4.28123, 1.58724, 2.02988, 4.83543, 3.711, 4.38805, 3.1062, 2.29913, 3.43114, 3.06239, 3.25774, 3.54191, 2.45749, 2.79035, 2.98549, 2.73585, 2.99431, 3.30198, 3.58194, 3.06871, 2.71791, 2.95178, 2.96514, 2.86821, 2.86802, 3.26228, 3.28251, 3.05847, 3.3625, 2.77878, 2.87112, 3.00232, 3.3681, 2.86715, 3.31668, 2.72584, 2.8436, 2.90667, 3.21553, 2.77048, 3.29088, 2.88534, 2.91285, 3.58826, 2.73015, 2.46258, 2.92166, 2.80219, 3.47558, 3.05629, 2.67796, 3.31276, 3.32835, 3.3097, 2.78537, 2.96072, 3.06169, 2.92569, 3.10952, 3.00818, 2.35001, 3.46859, 2.39317, 2.65915, 3.69564, 2.81998, 3.6275, 3.2659, 2.91561, 3.06226, 3.1316, 2.82202, 2.83501, 3.27212, 3.19399, 3.25295, 2.82564, 3.1525, 3.26545, 3.27483, 3.1519, 3.12376, 2.57645, 2.71414, 3.5777, 2.83503, 3.14344, 2.83504, 2.99064, 3.43635, 3.16527, 3.10291, 3.76958, 2.9298, 3.09964, 2.90245, 3.30807, 3.18601, 2.76767, 3.28333, 2.9399, 3.48273, 2.32647, 3.4226, 2.72785, 2.75667};
    float dataY[] = {1.8062, 2.79971, 2.10905, 2.10366, 2.01094, 2.09483, 1.44447, 1.85779, 2.07706, 1.81867, 1.38599, 1.46397, 2.22222, 2.17161, 2.27498, 2.63349, 2.42928, 2.65114, 0.964888, 1.32947, 2.12169, 3.13497, 1.25743, 2.31823, 2.83119, 2.00162, 1.97262, 1.66157, 2.07504, 2.60622, 1.58945, 1.53382, 2.95959, 1.82875, 2.86586, 1.949, 2.07493, 1.61017, 1.19576, 2.12641, 2.07057, 2.04068, 1.9197, 2.70463, 1.7863, 1.77405, 2.3151, 0.937069, 1.87142, 1.08086, 1.13722, 1.82371, 1.95766, 1.40493, 1.51161, 2.56672, 1.19544, 1.75586, 2.69847, 2.51859, 0.715415, 2.52229, 1.5731, 2.62572, 2.18964, 2.76678, 2.23385, 1.78369, 1.75263, 2.00371, 2.01222, 2.68102, 1.49873, 1.39068, 1.1908, 1.52995, 1.79278, 2.33654, 1.63118, 2.27857, 2.30366, 2.33794, 1.75804, 1.63769, 1.21118, 2.61787, 1.18494, 1.99488, 2.13264, 2.2127, 2.15665, 1.51731, 1.63636, 1.80468, 1.94519, 2.39411, 2.11261, 2.31795, 0.515299, 2.15548, 0.902023, 0.622031, 1.74492, 2.23711, 0.522077, -0.592624, 1.7372, 1.78726, 1.27088, 0.359325, 1.51977, 1.83296, 0.110507, 0.360343, 0.807907, 1.47382, 2.2566, 0.522661, 1.71602, 2.18617, 1.3163, 1.07073, 1.2296, 1.52645, 1.63174, 0.99263, 1.20357, 0.339192, 2.04603, 0.661917, 1.37396, 0.902372, 1.97925, 0.0331183, 0.840916, 0.688802, 0.80863, -0.337544, 1.13013, 2.05996, 0.833844, 0.981512, 0.934286, 1.05582, 0.689018, 2.56026, 0.225609, 1.48679, 1.8751, 1.00728, 0.164891, 0.392309, 0.0187851, 3.15565, 1.90524, 1.30258, 0.969718, 1.44615, -0.781673, 0.923519, 2.65787, 0.370012, 1.5026, 0.225226, 1.6922, 0.813319, 0.532053, 0.133494, 0.612207, 1.02067, 0.993833, 1.13713, 2.19999, 0.787182, 0.117398, -0.777024, 0.764055, 0.72806, -0.279228, 0.598935, 1.3695, 0.630458, 0.314271, 1.91345, 2.03391, 0.947991, 1.15867, 1.66353, 1.22184, 0.827808, 0.665453, 0.887473, 1.59406, 1.30371, 2.1963, 1.43923, -0.516902, 1.73629, 0.779926, 0.816138, -1.50408, -2.21923, -1.78517, -1.26396, -2.28994, -1.89483, -1.88808, -2.41002, -1.63841, -2.26531, -2.00302, -1.66328, -1.68115, -2.26883, -2.37889, -1.87843, -1.53137, -2.40082, -2.24291, -2.34, -1.84181, -1.55908, -2.14617, -2.35237, -2.48395, -1.75455, -1.98926, -2.19246, -2.10156, -2.06521, -2.12763, -1.91105, -2.07985, -1.64903, -1.68746, -1.51165, -1.80599, -2.17992, -1.95619, -1.95075, -1.81996, -2.01722, -2.29834, -2.36879, -1.64419, -2.18995, -2.21065, -1.5238, -2.02754, -2.15552, -1.98734, -1.83555, -1.95966, -2.524, -2.24347, -2.08722, -1.72357, -1.34843, -2.00068, -2.06823, -1.92925, -1.62999, -2.10617, -1.94501, -2.09491, -2.50825, -2.01066, -1.83963, -1.53884, -2.30317, -2.1619, -2.18038, -1.76141, -1.81631, -1.7796, -2.11069, -1.7411, -2.25466, -1.83904, -2.12736, -1.9463, -1.74959, -1.88456, -1.65247, -2.41666, -1.42484, -2.20779, -2.01902, -1.657, -2.17879, -1.75578, -1.72064, -2.41081, -2.01119, -1.58325, -1.85586, -2.51222, -1.59659, -2.14149, -2.13974, -0.578773, -1.26205, -0.638402, -1.02935, -1.32767, -0.398585, -0.265662, -1.04443, -1.4785, -0.349367, -0.576358, -1.31585, -0.501023, -1.06036, -0.887551, -1.03756, -0.616126, -1.57767, -0.678932, -0.649618, -1.24353, -1.04986, -1.98804, -1.18588, -0.91279, -1.06809, -1.81224, -1.05537, -0.502839, -0.339979, -0.679234, -1.67156, -0.402745, -1.67055, -0.253032, -0.66308, -0.672835, -1.54811, -0.657231, -1.09056, -0.79142, -0.886939, -1.24651, -0.964233, -0.971057, -1.40604, -1.02301, -1.07418, -0.0148368, -1.24844, -0.0292601, -1.48479, -1.65734, -1.42443, -0.902755, -1.10637, -0.736098, -1.29637, -0.949235, -0.737879, -0.649119, -1.24905, -0.884128, -0.852025, -0.623221, -2.07278, -0.420013, -1.23243, -1.14417, -0.866398, -1.11482, -1.47012, -1.32936, -0.884446, -0.983603, -1.1354, -1.15906, -1.25143, -0.57579, -0.818151, -1.58065, -0.866487, -0.543133, -1.12426, 0.138021, -1.28012, -1.34572, -1.17552, -0.67013, -1.62894, -1.01901, -1.97039, -1.01051, -0.883983, -0.363919, -0.523261, -0.331491, -1.0264, -1.41118, -0.701846};
    float dataZ[] = {3.27056, 2.76342, 3.09397, 3.10712, 3.15823, 3.04507, 4.00674, 3.34748, 2.89727, 3.29872, 3.40556, 2.15303, 3.18899, 2.8358, 3.32622, 2.8011, 2.91842, 3.54057, 3.55407, 3.17375, 2.49361, 3.26392, 2.88885, 2.68025, 2.54414, 2.60814, 2.63164, 2.59663, 2.72607, 2.59226, 2.95551, 3.17061, 3.52898, 2.98115, 3.01124, 3.52358, 2.64391, 2.57974, 2.20961, 2.33407, 2.92304, 3.14887, 2.61109, 3.15717, 2.87653, 2.96517, 3.02622, 3.35198, 3.10611, 3.07896, 3.13954, 3.02508, 2.97195, 2.45256, 2.62046, 3.17537, 2.7206, 3.31383, 3.42982, 2.95883, 3.47696, 3.56683, 3.14432, 2.96487, 2.92596, 2.74744, 2.18096, 2.4266, 2.69175, 3.39685, 2.9089, 3.06079, 3.18177, 2.94, 3.39528, 2.65301, 3.11916, 2.8924, 2.71172, 2.61192, 3.10946, 3.01869, 3.1127, 2.60044, 3.19541, 2.41296, 3.17213, 3.38425, 3.15952, 2.28089, 3.4875, 3.42567, 2.57585, 3.4797, 2.93846, 2.63, 2.8802, 2.60093, 1.74029, 2.54506, -1.18747, -0.594801, -0.247776, -1.89607, -1.35143, -1.13055, 0.312079, -1.29429, -0.925503, -0.574778, -0.825109, -1.22465, -0.786585, -0.775896, -2.11786, -0.487792, -0.472303, -1.30553, -1.31232, -0.285517, -0.791065, -0.627009, -0.799923, -1.06593, -1.06393, -0.940985, -1.27534, -0.463447, -1.43293, -0.688255, -1.89839, -0.939662, -1.01976, -1.05015, -0.867742, -1.12519, -0.795594, -0.668312, -0.946067, -0.486713, -0.956594, -0.572248, -0.712436, -0.826924, -0.597645, -1.77385, -0.512256, -0.383195, -1.00128, -1.2087, -1.37011, -0.880066, -1.63864, -0.239535, -1.32285, -1.36172, -1.59652, -1.51725, -1.05347, -0.451106, -1.57978, -1.49981, -0.576597, -0.540083, -1.61513, -0.84075, -0.988807, -0.481688, -0.509193, -1.20108, -0.727122, -1.10672, -1.24319, -0.393885, -0.862371, -1.24211, -0.95725, -1.51188, -0.952772, -1.01363, -1.56888, -0.860013, -0.316224, -0.783217, -1.92404, -1.38341, -0.562031, -1.15958, -0.967238, -0.553836, -1.31761, -1.05871, -0.0461138, -1.37379, -0.871382, -1.35915, -0.764214, -1.39885, -0.94388, -0.863752, 1.76834, 1.70231, 1.56149, 2.4005, 1.30781, 0.996497, 1.267, 3.07512, 1.94199, 1.42847, 2.0521, 1.75396, 1.95072, 1.87464, 1.52507, 2.34764, 1.27036, 0.218028, 2.22329, 2.83088, 3.2886, 2.83909, 1.84525, 1.95356, 2.09941, 1.43875, 1.34379, 1.19679, 2.08092, 1.67294, 2.92472, 0.893354, 0.905884, 3.03166, 1.06815, 1.07474, 4.21487, 4.05969, 2.27128, 1.56843, 1.18064, 1.35231, 2.2314, 2.33163, 2.98425, 2.5419, 2.08185, 2.19178, 1.8625, 3.2844, 2.2771, 2.61268, 2.21441, 2.2051, 0.983266, 3.14684, 3.1518, 0.816545, 1.64178, 2.51742, 2.22065, 1.59383, 1.49285, 2.06377, 3.25646, 2.47088, 1.4846, 0.897773, 2.12646, 0.767622, 1.47971, 2.35922, 1.32621, 2.52178, 2.19043, 2.5952, 0.697447, 0.0957397, 2.13551, 0.907801, 2.53392, 3.16027, 2.85604, 2.74905, 3.77129, 1.2493, 1.31681, 2.36053, 1.97765, 1.66377, 3.01813, 2.90926, 2.69921, 2.17614, 2.80395, 0.812347, 3.29552, 1.75434, 2.56185, 2.87956, 4.1013, 4.00384, 4.32721, 4.08908, 3.61492, 3.1566, 3.90228, 3.51884, 4.08272, 3.63705, 3.85038, 3.89168, 3.71436, 4.20452, 3.99729, 4.10481, 3.66297, 2.84661, 4.17592, 4.1409, 3.28989, 4.28063, 4.2141, 3.20906, 4.08529, 4.35648, 3.77968, 3.95023, 4.04317, 3.51944, 4.2657, 4.19594, 4.633, 4.35333, 4.27411, 4.00568, 3.51269, 4.21697, 3.31928, 4.44865, 4.4527, 4.01011, 4.07111, 4.09121, 4.03514, 3.20201, 4.28806, 3.81294, 4.06616, 3.79853, 3.80344, 3.97287, 3.99061, 4.8616, 3.5932, 4.35715, 3.34873, 4.16246, 4.93467, 3.13577, 3.22826, 4.79708, 3.99714, 4.09503, 4.84059, 4.66147, 4.58693, 4.75492, 3.98257, 4.33018, 3.32109, 4.10443, 4.84877, 3.69541, 3.61968, 3.78758, 3.17207, 4.31162, 4.41377, 4.92494, 4.38163, 4.29273, 4.27593, 3.3438, 3.63458, 3.41529, 4.01061, 3.37303, 3.22443, 4.56804, 4.50434, 3.73174, 3.77494, 4.01117, 4.36823, 3.79722, 3.78391, 4.46004, 3.58455, 4.01412};
    //Matrix<float> DATABASE(dataX, 1, 400, 4);
    //DATABASE.vStack(dataY, 1, 400);
    //DATABASE.vStack(dataZ, 1, 400);
    Matrix<float> DATABASE = dataGenerator3D(25000);
    
    
    KMeans<float> KM(DATABASE, 64, 1);

    unsigned __int64 time_start_v1 = std::chrono::duration_cast<std::chrono::nanoseconds>(std::chrono::system_clock::now().time_since_epoch()).count();

    time_start_v1 = std::chrono::duration_cast<std::chrono::nanoseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
    
    KM.run(35);
    //Matrix<int> data_to_centroids = KM.getDataToCentroidMap();
    //std::cout << data_to_centroids << std::endl;

    unsigned __int64 time_end_v1 = std::chrono::duration_cast<std::chrono::nanoseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
    std::cout << "inner time: " << (time_end_v1 - time_start_v1) * 1e-9 << std::endl;
    
    /////////////////////////////
    unsigned __int64 time_end = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
    std::cout << "total time(s): " << (time_end - time_start) * 1e-3 << std::endl;

    return 0;
}